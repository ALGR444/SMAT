"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã Bybit API –º–æ–¥—É–ª—è
"""

from bybit_api import download_historical_data, BybitAPI
import pandas as pd

def main():
    print("üöÄ –î–ï–ú–û-–ó–ê–ü–£–°–ö SMAT BYBIT API")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä API
    api = BybitAPI()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    if api.test_connection():
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit API —É—Å–ø–µ—à–Ω–æ")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        return
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 1: –ë–∞–∑–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    print("\n1. üì• –ë–ê–ó–û–í–ê–Ø –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–•")
    print("-" * 30)
    
    df_btc = download_historical_data(
        symbol="BTCUSDT",
        interval="60",  # 1 —á–∞—Å
        start_date="2024-01-01",
        end_date="2024-01-03",
        save_to_file=True,
        filename="demo_btc_1h.csv"
    )
    
    print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df_btc)} –∑–∞–ø–∏—Å–µ–π BTC/USDT")
    print(f"–ü–µ—Ä–∏–æ–¥: {df_btc.index[0]} - {df_btc.index[-1]}")
    print(f"–ö–æ–ª–æ–Ω–∫–∏: {list(df_btc.columns)}")
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 2: –†–∞–∑–Ω—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã
    print("\n2. ‚è∞ –†–ê–ó–ù–´–ï –¢–ê–ô–ú–§–†–ï–ô–ú–´")
    print("-" * 30)
    
    timeframes = [
        ("15", "15 –º–∏–Ω—É—Ç"),
        ("60", "1 —á–∞—Å"),
        ("240", "4 —á–∞—Å–∞"), 
        ("D", "1 –¥–µ–Ω—å")
    ]
    
    for interval, description in timeframes:
        df = download_historical_data(
            symbol="ETHUSDT",
            interval=interval,
            start_date="2024-01-01",
            end_date="2024-01-02",
            save_to_file=False
        )
        print(f"{description}: {len(df)} –∑–∞–ø–∏—Å–µ–π")
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 3: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    print("\n3. üîÑ –ù–ï–°–ö–û–õ–¨–ö–û –¢–û–†–ì–û–í–´–• –ü–ê–†")
    print("-" * 30)
    
    symbols = ["BTCUSDT", "ETHUSDT", "ADAUSDT", "SOLUSDT"]
    
    for symbol in symbols:
        df = download_historical_data(
            symbol=symbol,
            interval="240",  # 4 —á–∞—Å–∞
            start_date="2024-01-01",
            end_date="2024-01-02",
            save_to_file=False
        )
        if not df.empty:
            price_change = (df['close'].iloc[-1] / df['open'].iloc[0] - 1) * 100
            print(f"{symbol}: {len(df)} –∑–∞–ø–∏—Å–µ–π, –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {price_change:+.2f}%")
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 4: –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
    print("\n4. üìä –ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–•")
    print("-" * 30)
    
    if not df_btc.empty:
        print("–ê–Ω–∞–ª–∏–∑ BTC/USDT:")
        print(f"‚Ä¢ –ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: ${df_btc['open'].iloc[0]:.2f}")
        print(f"‚Ä¢ –ö–æ–Ω–µ—á–Ω–∞—è —Ü–µ–Ω–∞: ${df_btc['close'].iloc[-1]:.2f}")
        print(f"‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {((df_btc['close'].iloc[-1] / df_btc['open'].iloc[0] - 1) * 100):.2f}%")
        print(f"‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: ${df_btc['high'].max():.2f}")
        print(f"‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: ${df_btc['low'].min():.2f}")
        print(f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º: {df_btc['volume'].mean():.2f} BTC/—á–∞—Å")
        print(f"‚Ä¢ –û–±—â–∏–π –æ–±—ä–µ–º: {df_btc['volume'].sum():.2f} BTC")
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 5: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö
    print("\n5. üìã –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ò–ù–°–¢–†–£–ú–ï–ù–¢–ê–•")
    print("-" * 30)
    
    try:
        instruments = api.get_instruments_info("spot")
        usdt_pairs = [inst for inst in instruments['list'] if inst['quoteCoin'] == 'USDT']
        print(f"–í—Å–µ–≥–æ USDT –ø–∞—Ä: {len(usdt_pairs)}")
        
        print("–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–∞—Ä—ã:")
        for pair in usdt_pairs[:5]:
            print(f"  ‚Ä¢ {pair['symbol']} ({pair['baseCoin']})")
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
    
    print("\n" + "=" * 50)
    print("üéâ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
    print("üìÅ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ 'data/'")
    print("üöÄ –ú–æ–¥—É–ª—å –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")

if __name__ == "__main__":
    main()