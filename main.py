# main.py
import logging
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from data_collector import DataCollector
from block_processor import BlockProcessor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

def main():
    print("=== SMAT PROJECT: –ü–û–ò–°–ö –û–†–î–ï–†-–ë–õ–û–ö–û–í ===")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–±–æ—Ä—â–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    collector = DataCollector()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–º–≤–æ–ª–æ–≤ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    # collector.initialize_symbols()
    
    # –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    test_symbols = ['BTCUSDT', 'ETHUSDT', 'ADAUSDT', 'DOTUSDT', 'LINKUSDT']
    print(f"\n1. –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {len(test_symbols)} —Å–∏–º–≤–æ–ª–æ–≤...")
    collector.collect_multiple_symbols(test_symbols, '15', days_back=30)
    
    # –ü–æ–∏—Å–∫ –æ—Ä–¥–µ—Ä-–±–ª–æ–∫–æ–≤
    print("\n2. –ü–æ–∏—Å–∫ –æ—Ä–¥–µ—Ä-–±–ª–æ–∫–æ–≤...")
    processor = BlockProcessor()
    blocks = processor.find_blocks_all_symbols(timeframes=['15', '60'])
    
    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print(f"\n=== –ù–ê–ô–î–ï–ù–ù–´–ï –û–†–î–ï–†-–ë–õ–û–ö–ò ({len(blocks)} –≤—Å–µ–≥–æ) ===")
    
    if blocks:
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å–∏–º–≤–æ–ª–∞–º –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        blocks_by_symbol = {}
        for block in blocks:
            symbol = block['symbol']
            if symbol not in blocks_by_symbol:
                blocks_by_symbol[symbol] = []
            blocks_by_symbol[symbol].append(block)
        
        for symbol, symbol_blocks in blocks_by_symbol.items():
            print(f"\nüìà {symbol}: {len(symbol_blocks)} –±–ª–æ–∫–æ–≤")
            
            for i, block in enumerate(symbol_blocks[:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –±–ª–æ–∫–∞
                direction_icon = "üü¢" if block['direction'] == 'BULLISH' else "üî¥"
                print(f"   {direction_icon} –ë–ª–æ–∫ {i+1}:")
                print(f"      –¢–∞–π–º—Ñ—Ä–µ–π–º: {block['timeframe']}")
                print(f"      –í—Ä–µ–º—è: {block['timestamp']}")
                print(f"      –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {block['direction']}")
                print(f"      –°–∏–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {block['confirmation_strength']:.2f}%")
                print(f"      –¶–µ–ª—å: {block['price_target']:.2f}")
                print(f"      –ò–º–±–∞–ª–∞–Ω—Å: {block['imbalance_low']:.2f} - {block['imbalance_high']:.2f}")
    else:
        print("‚ùå –û—Ä–¥–µ—Ä-–±–ª–æ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –±–ª–æ–∫–∏ –∏–∑ –ë–î
    print(f"\n3. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –±–ª–æ–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
    confirmed_blocks = processor.get_confirmed_blocks()
    print(f"   –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {len(confirmed_blocks)} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—á–∏—Å—Ç–∫—É –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤
    print(f"\n4. –û—á–∏—Å—Ç–∫–∞ –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤...")
    cleaned_count = processor.cleanup_unconfirmed_blocks()
    print(f"   –£–¥–∞–ª–µ–Ω–æ –±–ª–æ–∫–æ–≤: {cleaned_count}")

if __name__ == "__main__":
    main()
